<%- include ('../partials/header') %>
<%- include ('../partials/menu') %>
<%- include ('../partials/message', {message: locals.message, error: locals.error}) %>

<style>


  .answer{
    display: flex;
    justify-content: center;
    align-items: stretch;
  }
  .question{
    max-width: 40vw;
    display: flex;
    flex-direction: column;
    justify-content: center;
  }
  #start-quiz-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    position: absolute;
    transition: opacity 1s;
  } 
.timer-score {
  display: flex;
  justify-content: space-between;
  width: 50%;
  margin-bottom: 20px;
  }

  #go-back-btn{
    align-self: stretch;
    background-color: #050505;
    border: none;
    color: #f5f5f5;
    text-align: center;
    text-decoration: none;
    display: inline-block;
    font-size: 16px;
    margin: 4px 2px;
    cursor: pointer;
    border-radius: 4px;
    transition-duration: 0.4s;
    padding: 1rem;
  }
  #goBackButton:hover {
    background-color: #3d3d3d;
    color: white;
  }

  h3 {
    color: #f5f5f5;
    margin-bottom: 2rem;
  }

  .answer {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: stretch;
    padding: 1rem 0 1rem 0;
  }

  .answer-btn {
    padding: 1rem;
    border: 2px solid #ccc;
    cursor: pointer;
    border-radius: 2rem;
    font-size: 1.5rem;
  }

  .answer-btn:hover {
    border-color: #999;
  }

  .answer-msg {
    text-align: center;
    display: inline;
    padding-left: 10px;
    font-weight: bold;
    font-size: 14px;
  }

  .answer-msg.correct {
    color: green;
  }

  .answer-msg.incorrect {
    color: red;
  }

  #quiz-container {
    padding: 50px;
    font-size: 28px;
    opacity: 1;
    transition: opacity 0.5s ease;
  }

  #quiz-container.fade-out {
    opacity: 0;
    transition: opacity 0.5s ease;
  }
  

  .timer-score-container {
    display: flex;
    justify-content: space-between;
    position: fixed;
    bottom: 0;
    left: 0;
    width: 100%;
    background-color: #222;
    padding: 1rem;
  }
 
  .timer,
  .score {
    font-size: 1.5em;
    color: #f5f5f5;
  }

#start-quiz-btn {
    font-size: 3em;
    padding: 3rem 6rem;
    cursor: pointer;
    background-color: #f5f5f5;
    color: #050505;
    border: none;
    border-radius: 5px;
}

</style>

<main>
  <div id="start-quiz-container" style="display: flex; justify-content: center; align-items: center;">
    <button id="start-quiz-btn" type="button">Start Quiz</button>
    <button id="go-back-btn">Go Back</button>
  </div> 
  <form id="quiz-form">
    <div>
      <div id="quiz-container">
      </div>
      <div class="timer-score-container">
          <div class="timer">Time: <span id="timer">00:00</span></div>
          <div class="score">Score: <span id="score">0</span></div>
      </div>
    </div>
  </form>
</main>


  <script>
  const apiData = <%- JSON.stringify(locals.data) %>;
  let currentQuestionIndex = 0;
  let numCorrect = 0;
  let startTime = 0;
  let timeElapsed = 0;
  let timerInterval;

  function startTimer() {
    startTime = Date.now();
    timerInterval = setInterval(updateTimer, 1000);
  }
  
  function updateTimer() {
    timeElapsed = Math.floor((Date.now() - startTime) / 1000);
    const minutes = Math.floor(timeElapsed / 60);
    const seconds = timeElapsed % 60;
    document.getElementById('timer').innerText = (minutes < 10 ? '0' : '') + minutes + ':' + (seconds < 10 ? '0' : '') + seconds;
  }

function difficultyStringToNumber(difficulty) {
  switch (difficulty) {
    case 'easy':
      return 1;
    case 'medium':
      return 2;
    case 'hard':
      return 3;
    default:
      return 0;
  }
}

function calculateScore(numCorrect, numIncorrect, timeElapsed, difficulty) {
  const baseScore = numCorrect * 50;
  const incorrectPenalty = numIncorrect * 20;
  const difficultyMultiplier = difficultyStringToNumber(difficulty) * 0.5;
  const timeBonus = Math.max(180 - timeElapsed, 0) * 0.1;
  const score = Math.max(Math.round((baseScore + timeBonus + difficultyMultiplier - incorrectPenalty) * 10), 0); // Use Math.max to ensure the score never drops below 0
  return score;
}

function updateScoreDisplay(numCorrect, numIncorrect, timeElapsed, difficulty) {
  const score = calculateScore(numCorrect, numIncorrect, timeElapsed, difficulty);
  document.getElementById('score').innerText = `${score}`;
}



// START QUIZ BUTTON
document.getElementById('start-quiz-btn').addEventListener('click', () => {
  currentQuestionIndex = 0;
  numCorrect = 0;
  numIncorrect = 0;
  timeElapsed = 0;
  document.getElementById('start-quiz-container').style.display = 'none';
  document.getElementById('quiz-container').style.display = 'block';
  displayQuestion(apiData, currentQuestionIndex);
  startTimer();
});



document.getElementById('go-back-btn').addEventListener('click', () => {
  window.location.href = '/home';
});

let isAnswerBlocked = false;

function blockAnswers() {
  isAnswerBlocked = true;
  const answerButtons = document.querySelectorAll('.answer-btn');
  answerButtons.forEach((btn) => {
    btn.disabled = true;
  });
}

function unblockAnswers() {
  isAnswerBlocked = false;
  const answerButtons = document.querySelectorAll('.answer-btn');
  answerButtons.forEach((btn) => {
    if (!btn.hasAttribute('data-clicked')) {
      btn.disabled = false;
    }
  });
}

function displayQuestion(questions, index) {
  const quizContainer = document.getElementById('quiz-container');
  quizContainer.classList.remove('fade-out');
  quizContainer.innerHTML = '';

  const questionObj = questions[index];
  const questionDiv = document.createElement('div');
  questionDiv.classList.add('question');
  questionDiv.innerHTML = `
    <h3>Question ${index + 1}: ${questionObj.question.text}</h3>
  `;

  const answers = [questionObj.correctAnswer, ...questionObj.incorrectAnswers].sort(() => Math.random() - 0.5);

  answers.forEach((answer, answerIndex) => {
    const answerDiv = document.createElement('div');
    answerDiv.classList.add('answer');
    answerDiv.innerHTML = `
      <button type="button" class="answer-btn" data-question="${index}" data-answer="${answer}">
        ${answer}
      </button>
    `;
    questionDiv.appendChild(answerDiv);
  });

  quizContainer.appendChild(questionDiv);
}

document.addEventListener('click', (event) => {
  if (event.target.matches('.answer-btn') && !isAnswerBlocked) {
    const button = event.target;
    const questionIndex = parseInt(button.dataset.question);
    const answer = button.dataset.answer;
    const answerDiv = button.parentElement;
    const answerMsg = document.createElement('span');
    answerMsg.classList.add('answer-msg');

    button.setAttribute('data-clicked', 'true');

    if (answer === apiData[questionIndex].correctAnswer) {
      numCorrect++;
      button.style.borderColor = 'green';
      answerMsg.innerText = 'Correct!';
      answerMsg.classList.add('correct');
      answerDiv.appendChild(answerMsg);
      const difficulty = apiData[0].difficulty;
      updateScoreDisplay(numCorrect, numIncorrect, timeElapsed, difficulty);
    } else {
      numIncorrect++;
      button.style.borderColor = 'red';
      answerMsg.innerText = 'Incorrect!';
      answerMsg.classList.add('incorrect');
      answerDiv.appendChild(answerMsg);
      const difficulty = apiData[0].difficulty;
      updateScoreDisplay(numCorrect, numIncorrect, timeElapsed, difficulty);
    }
    

    // Disable all answer buttons for the current question
    const allAnswerButtons = document.querySelectorAll('.answer-btn[data-question="' + questionIndex + '"]');
    allAnswerButtons.forEach((btn) => {
      btn.disabled = true;
    });

    // Move to the next question
    if (questionIndex + 1 < apiData.length) {
      setTimeout(() => {
        const quizContainer = document.getElementById('quiz-container');
        quizContainer.classList.add('fade-out');
        setTimeout(() => {
          unblockAnswers();
          currentQuestionIndex++;
          displayQuestion(apiData, currentQuestionIndex);
        }, 1000);
      }, 2000);
    } else {
      setTimeout(() => {
        const quizContainer = document.getElementById('quiz-container');
        quizContainer.classList.add('fade-out');
        clearInterval(timerInterval);
        updateScoreDisplay(); // Update the score display right before showing results
        setTimeout(() => {
          quizContainer.classList.remove('fade-out');
          displayResults();
        }, 1000);
      }, 2000);
    }
  }
});



function displayResults() {
  const difficulty = apiData[0].difficulty;
  const score = calculateScore(numCorrect, numIncorrect, timeElapsed, apiData[0].difficulty);
  updateScoreDisplay(numCorrect, numIncorrect, timeElapsed, difficulty); // Update the score display with the required arguments
  const quizContainer = document.getElementById('quiz-container');
  quizContainer.innerHTML = `
    <h2>Quiz Completed!</h2>
    <p>Score: ${score}</p>
    <p>Number of correct answers: ${numCorrect}</p>
    <p>Time taken: ${timeElapsed} seconds</p>
  `;
  submitQuizResults(score, numCorrect, timeElapsed, apiData[0].difficulty, apiData[0].category);
}

async function submitQuizResults(score, numCorrect, timeElapsed, difficulty, category) {
  try {
    const response = await fetch('/submitQuiz', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        score: score,
        num_correct: numCorrect,
        time_taken: timeElapsed,
        difficulty: difficultyStringToNumber(difficulty),
        category: category,
      }),
    });

    if (response.ok) {
      console.log('Quiz results submitted successfully');
    } else {
      console.log('Failed to submit quiz results');
    }
  } catch (error) {
    console.error('Error:', error);
  }
}
</script>
  